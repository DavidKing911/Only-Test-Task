document.addEventListener('DOMContentLoaded', () => {
    // Данная функция позволяет правильно обрабатывать нажатие на кнопку
    function clickOnBtn() {
        // находим все кнопки и приравниваем переменной
        const allButtons = document.querySelectorAll('.btn');
        // создаём пустой массив, чтобы в дальнейшем использовать для понимания, когда были нажаты две кнопки
        let pressBtnArray = [];
        // данный цикл проходится по длине массива со всем кнопками
        for (let i = 0; i < allButtons.length; i++) {
            // создаём обработчик события нажатия на кнопку
            allButtons[i].addEventListener('click', () => {
                // добавляем индекс этой кнопки в массив для проверки, 
                // которая позволить узнать количество нажатых кнопок
                pressBtnArray.push(i);
                // удаляем все дубликаты из массива проверки, 
                // которые могли возникнуть при повторном нажатии на кнопку
                pressBtnArray = [...new Set(pressBtnArray)];
                // данное условие позволяет проверить, есть ли в массиве 
                // проверки количества нажатых кнопок больше одной кнопки
                if (pressBtnArray.length > 1) {
                    // предыдущую нажатую кнопку возвращаем в состояние по умолчанию
                    allButtons[pressBtnArray[0]].innerHTML = '+';
                    // удаляем из массива проверки индекс предыдущей кнопки
                    pressBtnArray.shift();
                }
                // данные условия позволяют понять в каком состоянии находится кнопка,
                // чтобы либо вернуть значение по умолчанию, либо открыть её со значением
                if (allButtons[i].textContent === '+') {
                    // текст закрытой кнопки меняем на текст для открытой кнопки
                    allButtons[i].innerHTML = '-&nbsp;&nbsp;Стадион';
                } else {
                    // текст открытой кнопки меняем на текст закрытой кнопки
                    allButtons[i].innerHTML = '+';
                }
            });
        }
    }

    // Вызываем функцию обработки нажатии на кнопку
    clickOnBtn();

    // Данная функцию позволяет правильно обрабатывать нажатие на задний фон при открытых и закрытых кнопках
    function  clickOnTheBackground() {
        // находим все кнопки и приравниваем переменной
        const allButtons = document.querySelectorAll('.btn');
        // создаём обработчик события нажатии на любое место на странице
        window.addEventListener('click', event => {
            // данное условие позволяет понять нажали мы на кнопку или на родительский элемент кнопки
            if (event.target.querySelector('.container')) {
                // данный цикл проходится по длине массива со всем кнопками
                for (let i = 0; i < allButtons.length; i++) {
                    // текст всех кнопок возвращаем к значению по умолчанию
                    allButtons[i].innerHTML = '+';
                }
            }
        });
    }

    // Вызываем функцию обработки нажатия на задний фон
    clickOnTheBackground();

    // Данная функция позволяет фиксировать местоположение кнопок относительно расширения
    function fixingThePositionOfTheButtons() {
        // находим все кнопки и приравниваем переменной
        const allButtons = document.querySelectorAll('.btn');
        // соаздём массив значений left для всех кнопок
        const leftArray = [580, 446, 1373, 1414, 1081, 1593, 687, 1148, 1306, 1107];
        // данный цикл проходится по длине массива со всем кнопками
        for (let i = 1; i < allButtons.length + 1; i++) {
            // находим каждую кнопку и приравниваем переменной
            const elem = document.querySelector('.btn:nth-child(' + i + ')');
            // выполняем расчёт относительно расширения экрана и меняем значение left у каждой кнопки
            elem.style.left = String(leftArray[i - 1] - ((1920 - screen.width) / 2)) + 'px';
        }
        // данные условия позволяют понять является ли расширения меньше 1350,
        // поскольку в макете есть крайняя правая кнопка, которая сдвигает всю страницу,
        // и поскольку на фото это здание уже не видно, то просто убираем эту кнопку
        if (screen.width < 1350) {
            // убираем крйнюю правую кнопку
            document.querySelector('.btn:nth-child(6)').style.display = 'none';
        } else {
            // задаём значение block дисплею, дабы кнопка вновь появилась
            document.querySelector('.btn:nth-child(6)').style.display = 'block';
        }
        // данное значение позволяет запускать функцию каждый раз при изменении расширения
        window.onresize = () => {    
            // данный цикл проходится по длине массива со всем кнопками
            for (let i = 1; i < allButtons.length + 1; i++) {
                // находим каждую кнопку и приравниваем переменной
                const elem = document.querySelector('.btn:nth-child(' + i + ')');
                // выполняем расчёт относительно расширения экрана и меняем значение left у каждой кнопки
                elem.style.left = String(leftArray[i - 1] - ((1920 - window.innerWidth) / 2)) + 'px';
            }
            // данные условия позволяют понять является ли расширения меньше 1350,
            // поскольку в макете есть крайняя правая кнопка, которая сдвигает всю страницу,
            // и поскольку на фото это здание уже не видно, то просто убираем эту кнопку
            if (screen.width < 1350) {
                document.querySelector('.btn:nth-child(6)').style.display = 'none';
            } else {
                // задаём значение block дисплею, дабы кнопка вновь появилась
                document.querySelector('.btn:nth-child(6)').style.display = 'block';
            }
        };
    }

    // Вызываем функцию фиксации местоположения кнопок
    fixingThePositionOfTheButtons();
});